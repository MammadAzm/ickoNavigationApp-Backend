from django.db import models

from django.contrib.auth.models import User

from phonenumber_field.modelfields import PhoneNumberField

# Create your models here.


class EnumerationType(models.Model):
    # ID AutoGenerated
    enum_type_id = models.CharField(unique=True, max_length=30, blank=False)
    description = models.CharField(max_length=255, blank=True)

    def __str__(self):
        return self.enum_type_id


class Enumeration(models.Model):
    # id = models.AutoField(primary_key=True)
    # ID AutoGenerated
    enum_id = models.CharField(unique=True, max_length=30, blank=False)
    description = models.CharField(max_length=255, blank=True)

    # Foreign Keys
    parent_enum_id = models.ForeignKey('self', on_delete=models.CASCADE, blank=True, null=True)
    enum_type_id = models.ForeignKey(EnumerationType, on_delete=models.CASCADE, blank=True)

    def __str__(self):
        return self.enum_id


class Target(models.Model):
    target_id = models.AutoField(primary_key=True)
    name = models.CharField(max_length=20, unique=False, blank=False,)
    code = models.CharField(max_length=20, unique=True, blank=False,)
    phone = PhoneNumberField(null=False, blank=False, unique=True,)

    # Foreign Keys
    type_enum_id = models.ForeignKey(Enumeration, on_delete=models.CASCADE, null=False)

    def __str__(self):
        return str(self.name) + " | " + str(self.code)


class GPSData(models.Model):
    timestamp = models.FloatField()
    latitude = models.DecimalField(max_digits=15, decimal_places=6)
    longitude = models.DecimalField(max_digits=15, decimal_places=6)
    speed = models.FloatField()

    # Foreign Keys
    targetID = models.ForeignKey(Target, on_delete=models.CASCADE, null=False)
    N_S = models.ForeignKey(Enumeration , on_delete=models.CASCADE, null=False, related_name='North_South')
    W_E = models.ForeignKey(Enumeration, on_delete=models.CASCADE, null=False, related_name='West_East')

    def __str__(self):
        return str(self.targetID)


class StatusData(models.Model):
    timestamp = models.FloatField()
    loadSkew = models.BooleanField()  # D0 True: Latched | False: Detached
    loadPresent = models.BooleanField()  # D1 True: Present | False: Absent
    latchHealth = models.BooleanField()  # D2 True: Healthy | False: Broken
    loadHealth = models.BooleanField()  # D3 True: Healthy | False: Broken
    positionVerify = models.BooleanField()  # D4 True: Valid | False: Invalid
    spoofPresent = models.BooleanField()  # D5 True: Present | False: Absent
    gpsVerify = models.BooleanField()  # D6 True: Valid | False: Invalid
    incomingCall = models.BooleanField()  # D7 True: - | False: -
    outgoingCall = models.BooleanField()  # D8 True: - | False: -

    # Foreign Keys
    targetID = models.ForeignKey(Target, on_delete=models.CASCADE, null=False)  # D9

    def __str__(self):
        return str(self.targetID)



class CallLog(models.Model):
    fromWhom = models.ForeignKey(Target, on_delete=models.CASCADE, null=False, related_name='fromWhom')
    toWhom = models.ForeignKey(Target, on_delete=models.CASCADE, null=False, related_name='toWhom')
    timestampStart = models.FloatField()
    timestampEnd = models.FloatField(null=True)
    callLength = models.IntegerField(null=True)


class CallQuery(models.Model):  # Only Calls Made from ControlRoom to Modules
    toWhom = models.ForeignKey(Target, on_delete=models.CASCADE, null=False, related_name='toWhomQuery')
    timeQueryMade = models.FloatField()
    phone = PhoneNumberField(null=False, blank=False, unique=False, default="+980000000000")
    CallMade = models.BooleanField(default=False)


class Site(models.Model):
    name = models.CharField(unique=True, max_length=30, blank=False)
    latitude = models.DecimalField(max_digits=15, decimal_places=6)
    longitude = models.DecimalField(max_digits=15, decimal_places=6)

    description = models.CharField(max_length=150, blank=False)

    # Foreign Keys:
    enum_id = models.ForeignKey(Enumeration, on_delete=models.CASCADE, null=False)


class Loading(models.Model):
    responsibleMachineID = models.ForeignKey(Target, on_delete=models.CASCADE, null=False)
    loadedTimestamp = models.IntegerField(blank=True, null=True)
    unloadedTimestamp = models.IntegerField(blank=True, null=True)

    fromSite = models.ForeignKey(Site, on_delete=models.CASCADE, related_name="fromSite")
    fromLatitude = models.DecimalField(max_digits=15, decimal_places=6)
    fromLongitude = models.DecimalField(max_digits=15, decimal_places=6)

    toSite = models.ForeignKey(Site, on_delete=models.CASCADE, related_name="toSite")
    toLatitude = models.DecimalField(max_digits=15, decimal_places=6, null=True)
    toLongitude = models.DecimalField(max_digits=15, decimal_places=6, null=True)

    underLoadDuration = models.FloatField(blank=True, null=True)
    pavedDistance = models.IntegerField(null=True)


#
# class Constants(models.Model):
#     name = models.CharField(unique=True, max_length=20, blank=False)
#     value = models.FloatField(null=True)
